name: build

env:
  GO_VERSION: '1.24.6'
  NODE_VERSION: '20'
  # 添加Docker镜像相关环境变量
  DOCKER_REPO: 'yuanhu66/adgh'

on:
  push:
    branches:
    - '*'
    tags:
    - 'v*'
  pull_request:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    env:
      GO111MODULE: 'on'
      GOPROXY: 'https://goproxy.cn'
    strategy:
      fail-fast: false
      matrix:
        os:
        - 'ubuntu-latest'
        - 'macOS-latest'
        - 'windows-latest'
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}
    - name: Set up Node
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Set up Go modules cache
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: "${{ runner.os }}-go-${{ hashFiles('go.sum') }}"
        restore-keys: ${{ runner.os }}-go-
    - name: Get npm cache directory
      id: npm-cache
      run: echo "::set-output name=dir::$( npm config get cache )"
    - name: Set up npm cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: "${{ runner.os }}-node-${{ hashFiles('client/package-lock.json') }}"
        restore-keys: ${{ runner.os }}-node-
    - name: Run tests
      shell: bash
      run: make VERBOSE=1 deps test go-bench go-fuzz
    - name: Upload coverage
      uses: codecov/codecov-action@v1
      if: success() && matrix.os == 'ubuntu-latest'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.txt

  build-release:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}
    - name: Set up Node
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Set up Go modules cache
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: "${{ runner.os }}-go-${{ hashFiles('go.sum') }}"
        restore-keys: ${{ runner.os }}-go-
    - name: Get npm cache directory
      id: npm-cache
      run: echo "::set-output name=dir::$(npm config get cache)"
    - name: Set up npm cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: "${{ runner.os }}-node-${{ hashFiles('client/package-lock.json') }}"
        restore-keys: ${{ runner.os }}-node-
    - name: Set up Snapcraft
      run: sudo snap install snapcraft --classic
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Run snapshot build
      run: make SIGN=0 VERBOSE=1 VERSION="v0.0.0-github" build-release build-docker
    
    # 添加DockerHub登录步骤
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    # 添加镜像标签和推送步骤
    - name: Tag and push Docker image
      run: |
        # 设置镜像标签
        IMAGE_TAG=${{ github.sha }}
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          IMAGE_TAG=${GITHUB_REF#refs/tags/}
        fi
        
        # 标记镜像
        docker tag ${{ env.DOCKER_REPO }}:latest ${{ env.DOCKER_REPO }}:$IMAGE_TAG
        
        # 推送镜像
        docker push ${{ env.DOCKER_REPO }}:latest
        docker push ${{ env.DOCKER_REPO }}:$IMAGE_TAG

  notify:
    needs:
    - build-release
    if:
      ${{
        always() &&
        github.repository_owner == 'AdguardTeam' &&
        (
          github.event_name == 'push' ||
          github.event.pull_request.head.repo.full_name == github.repository
        )
      }}
    runs-on: ubuntu-latest
    steps:
    - name: Conclusion
      uses: technote-space/workflow-conclusion-action@v1
    - name: Send Slack notif
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ env.WORKFLOW_CONCLUSION }}
        fields: repo, message, commit, author, workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
