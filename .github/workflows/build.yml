name: build

env:
  GO_VERSION: '1.24.6'
  NODE_VERSION: '20'
  # 可以在这里定义默认镜像名（如果未设置secret）
  DEFAULT_IMAGE_NAME: 'myapp'

on:
  push:
    branches:
    - '*'
    tags:
    - 'v*'
  pull_request:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    env:
      GO111MODULE: 'on'
      GOPROXY: 'https://goproxy.cn'
    strategy:
      fail-fast: false
      matrix:
        os:
        - 'ubuntu-latest'
        - 'macOS-latest'
        - 'windows-latest'
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}
    - name: Set up Node
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Set up Go modules cache
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
        restore-keys: ${{ runner.os }}-go-
    - name: Get npm cache directory
      id: npm-cache
      run: echo "::set-output name=dir::$( npm config get cache )"
    - name: Set up npm cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('client/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-
    - name: Run tests
      shell: bash
      run: make VERBOSE=1 deps test go-bench go-fuzz
    - name: Upload coverage
      uses: codecov/codecov-action@v1
      if: success() && matrix.os == 'ubuntu-latest'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.txt

  build-release:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}
    - name: Set up Node
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Set up Go modules cache
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
        restore-keys: ${{ runner.os }}-go-
    - name: Get npm cache directory
      id: npm-cache
      run: echo "::set-output name=dir::$(npm config get cache)"
    - name: Set up npm cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('client/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-
    - name: Set up Snapcraft
      run: sudo snap install snapcraft --classic
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Determine image name
      id: image-info
      run: |
        # 使用secret中定义的镜像名，如果未设置则使用默认值
        if [ -n "${{ secrets.IMAGE_NAME }}" ]; then
          echo "image_name=${{ secrets.IMAGE_NAME }}" >> $GITHUB_OUTPUT
        else
          echo "image_name=${{ env.DEFAULT_IMAGE_NAME }}" >> $GITHUB_OUTPUT
        fi
        
        # 生成镜像标签（基于git信息）
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          # 如果是标签推送，使用标签名作为版本
          echo "image_tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          # 否则使用commit短哈希
          echo "image_tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        fi
    - name: Run build and push
      run: |
        # 构建应用和Docker镜像
        make SIGN=0 VERBOSE=1 VERSION="${{ steps.image-info.outputs.image_tag }}" build-release build-docker
        
        # 为构建的镜像打标签（确保与构建输出的镜像名匹配）
        docker tag ${{ steps.image-info.outputs.image_name }}:${{ steps.image-info.outputs.image_tag }} \
                  ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.image-info.outputs.image_name }}:${{ steps.image-info.outputs.image_tag }}
        
        # 如果是标签推送，额外打一个latest标签
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          docker tag ${{ steps.image-info.outputs.image_name }}:${{ steps.image-info.outputs.image_tag }} \
                    ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.image-info.outputs.image_name }}:latest
        fi
        
        # 推送镜像到Docker Hub
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.image-info.outputs.image_name }}:${{ steps.image-info.outputs.image_tag }}
        
        # 如果是标签推送，推送latest标签
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.image-info.outputs.image_name }}:latest
        fi

  notify:
    needs:
    - build-release
    if: ${{
        always() &&
        github.repository_owner == 'AdguardTeam' &&
        (
          github.event_name == 'push' ||
          github.event.pull_request.head.repo.full_name == github.repository
        )
      }}
    runs-on: ubuntu-latest
    steps:
    - name: Conclusion
      uses: technote-space/workflow-conclusion-action@v1
    - name: Send Slack notif
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ env.WORKFLOW_CONCLUSION }}
        fields: repo, message, commit, author, workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
